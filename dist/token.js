"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReservedWords = exports.Keywords = exports.Token = exports.TokenType = void 0;
var TokenType;
(function (TokenType) {
    TokenType[TokenType["LEFT_PARENTHESIS"] = 0] = "LEFT_PARENTHESIS";
    TokenType[TokenType["RIGHT_PARENTHESIS"] = 1] = "RIGHT_PARENTHESIS";
    TokenType[TokenType["LEFT_CURLY_BRACE"] = 2] = "LEFT_CURLY_BRACE";
    TokenType[TokenType["RIGHT_CURLY_BRACE"] = 3] = "RIGHT_CURLY_BRACE";
    TokenType[TokenType["COMMA"] = 4] = "COMMA";
    TokenType[TokenType["DOT"] = 5] = "DOT";
    TokenType[TokenType["MINUS"] = 6] = "MINUS";
    TokenType[TokenType["PLUS"] = 7] = "PLUS";
    TokenType[TokenType["CONCATENATE"] = 8] = "CONCATENATE";
    TokenType[TokenType["DIVIDE"] = 9] = "DIVIDE";
    TokenType[TokenType["ASTERISK"] = 10] = "ASTERISK";
    TokenType[TokenType["DOLLAR_SIGN"] = 11] = "DOLLAR_SIGN";
    TokenType[TokenType["SEMICOLON"] = 12] = "SEMICOLON";
    TokenType[TokenType["NOT"] = 13] = "NOT";
    TokenType[TokenType["NOT_EQUAL"] = 14] = "NOT_EQUAL";
    TokenType[TokenType["EQUAL"] = 15] = "EQUAL";
    TokenType[TokenType["EQUAL_EQUAL"] = 16] = "EQUAL_EQUAL";
    TokenType[TokenType["GREATER"] = 17] = "GREATER";
    TokenType[TokenType["GREATER_EQUAL"] = 18] = "GREATER_EQUAL";
    TokenType[TokenType["LESS"] = 19] = "LESS";
    TokenType[TokenType["LESS_EQUAL"] = 20] = "LESS_EQUAL";
    TokenType[TokenType["NEWLINE"] = 21] = "NEWLINE";
    TokenType[TokenType["ARRAY"] = 22] = "ARRAY";
    TokenType[TokenType["FUNCTION_CALL"] = 23] = "FUNCTION_CALL";
    TokenType[TokenType["IDENTIFIER"] = 24] = "IDENTIFIER";
    TokenType[TokenType["STR"] = 25] = "STR";
    TokenType[TokenType["INT"] = 26] = "INT";
    TokenType[TokenType["FLT"] = 27] = "FLT";
    TokenType[TokenType["CODE"] = 28] = "CODE";
    TokenType[TokenType["AND"] = 29] = "AND";
    TokenType[TokenType["ELSE"] = 30] = "ELSE";
    TokenType[TokenType["FALSE"] = 31] = "FALSE";
    TokenType[TokenType["DEFUN"] = 32] = "DEFUN";
    TokenType[TokenType["FOR"] = 33] = "FOR";
    TokenType[TokenType["IFQ"] = 34] = "IFQ";
    TokenType[TokenType["NIL"] = 35] = "NIL";
    TokenType[TokenType["OR"] = 36] = "OR";
    TokenType[TokenType["PRINT"] = 37] = "PRINT";
    TokenType[TokenType["RETRN"] = 38] = "RETRN";
    TokenType[TokenType["THIS"] = 39] = "THIS";
    TokenType[TokenType["TRUE"] = 40] = "TRUE";
    TokenType[TokenType["DEF"] = 41] = "DEF";
    TokenType[TokenType["WLOOP"] = 42] = "WLOOP";
    TokenType[TokenType["BREAK"] = 43] = "BREAK";
    TokenType[TokenType["OK"] = 44] = "OK";
    TokenType[TokenType["END"] = 45] = "END";
})(TokenType = exports.TokenType || (exports.TokenType = {}));
class Token {
    constructor(type, lexeme, literal, line) {
        this.type = type;
        this.lexeme = lexeme;
        this.literal = literal;
        this.line = line;
    }
    toString() {
        return this.type + " " + this.lexeme + " " + this.literal;
    }
}
exports.Token = Token;
var Keywords;
(function (Keywords) {
    Keywords.keywords = new Map();
    Keywords.keywords.set("and", TokenType.AND);
    Keywords.keywords.set("else", TokenType.ELSE);
    Keywords.keywords.set("false", TokenType.FALSE);
    Keywords.keywords.set("for", TokenType.FOR);
    Keywords.keywords.set("defun", TokenType.DEFUN);
    Keywords.keywords.set("ifq", TokenType.IFQ);
    Keywords.keywords.set("nil", TokenType.NIL);
    Keywords.keywords.set("or", TokenType.OR);
    Keywords.keywords.set("print", TokenType.PRINT);
    Keywords.keywords.set("retrn", TokenType.RETRN);
    Keywords.keywords.set("true", TokenType.TRUE);
    Keywords.keywords.set("def", TokenType.DEF);
    Keywords.keywords.set("wloop", TokenType.WLOOP);
    Keywords.keywords.set("break", TokenType.BREAK);
})(Keywords = exports.Keywords || (exports.Keywords = {}));
var ReservedWords;
(function (ReservedWords) {
    ReservedWords.keywords = new Map();
    ReservedWords.keywords.set("leftParenthesis", TokenType.LEFT_PARENTHESIS);
    ReservedWords.keywords.set("rightParenthesis", TokenType.RIGHT_PARENTHESIS);
    ReservedWords.keywords.set("comma", TokenType.COMMA);
    ReservedWords.keywords.set("dot", TokenType.DOT);
    ReservedWords.keywords.set("minus", TokenType.MINUS);
    ReservedWords.keywords.set("plus", TokenType.PLUS);
    ReservedWords.keywords.set("concatenate", TokenType.PLUS);
    ReservedWords.keywords.set("divide", TokenType.DIVIDE);
    ReservedWords.keywords.set("asterisk", TokenType.ASTERISK);
    ReservedWords.keywords.set("not", TokenType.NOT);
    ReservedWords.keywords.set("notEqual", TokenType.NOT_EQUAL);
    ReservedWords.keywords.set("equal", TokenType.EQUAL);
    ReservedWords.keywords.set("equalEqual", TokenType.EQUAL_EQUAL);
    ReservedWords.keywords.set("greater", TokenType.GREATER);
    ReservedWords.keywords.set("greaterEqual", TokenType.GREATER_EQUAL);
    ReservedWords.keywords.set("less", TokenType.LESS);
    ReservedWords.keywords.set("lessEqual", TokenType.LESS_EQUAL);
    ReservedWords.keywords.set("newline", TokenType.NEWLINE);
    ReservedWords.keywords.set("identifier", TokenType.IDENTIFIER);
    ReservedWords.keywords.set("str", TokenType.STR);
    ReservedWords.keywords.set("inte", TokenType.INT);
    ReservedWords.keywords.set("flt", TokenType.FLT);
    ReservedWords.keywords.set("end", TokenType.END);
    ReservedWords.keywords.set("dollarSign", TokenType.DOLLAR_SIGN);
})(ReservedWords = exports.ReservedWords || (exports.ReservedWords = {}));
